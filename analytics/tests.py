import os
from analytics.models import Analytic
from datetime import date
from dateutil.relativedelta import relativedelta
from django.test import TestCase, Client
from supabase import create_client


class SampleTestCase(TestCase):
  def test_sample1(self):
    self.assertEqual(1+2, 3)


class AnalyticModelTestCase(TestCase):
  def test_create_analytic0(self):
    get = date.today()
    analytic = Analytic(videoId=0, get_at=get, YouTubeView=0, YouTubeLike=0, YouTubeComment=0, niconicoView=0, niconicoLike=0, niconicoComment=0, niconicoMylist=0)
    analytic.save()
    analytic = Analytic.objects.get(pk=analytic.pk)
    self.assertEqual(analytic.videoId, 0)
    self.assertEqual(analytic.get_at, get)
    self.assertEqual(analytic.YouTubeView, 0)
    self.assertEqual(analytic.YouTubeLike, 0)
    self.assertEqual(analytic.YouTubeComment, 0)
    self.assertEqual(analytic.niconicoView, 0)
    self.assertEqual(analytic.niconicoLike, 0)
    self.assertEqual(analytic.niconicoComment, 0)
    self.assertEqual(analytic.niconicoMylist, 0)

  def test_create_analytic1(self):
    get = date.today()
    analytic = Analytic(videoId=1, get_at=get, YouTubeView=10, YouTubeLike=10, YouTubeComment=10, niconicoView=10, niconicoLike=10, niconicoComment=10, niconicoMylist=10)
    analytic.save()
    analytic = Analytic.objects.get(pk=analytic.pk)
    self.assertEqual(analytic.videoId, 1)
    self.assertEqual(analytic.get_at, get)
    self.assertEqual(analytic.YouTubeView, 10)
    self.assertEqual(analytic.YouTubeLike, 10)
    self.assertEqual(analytic.YouTubeComment, 10)
    self.assertEqual(analytic.niconicoView, 10)
    self.assertEqual(analytic.niconicoLike, 10)
    self.assertEqual(analytic.niconicoComment, 10)
    self.assertEqual(analytic.niconicoMylist, 10)

  def test_totalStatistics0(self):
    get = date.today()
    analytic = Analytic(videoId=0, get_at=get, YouTubeView=0, YouTubeLike=0, YouTubeComment=0, niconicoView=0, niconicoLike=0, niconicoComment=0, niconicoMylist=0)
    analytic.save()
    self.assertEqual(analytic.totalStatistic()["view"], 0)
    self.assertEqual(analytic.totalStatistic()["like"], 0)
    self.assertEqual(analytic.totalStatistic()["comment"], 0)

  def test_totalStatistics1(self):
    get = date.today()
    analytic = Analytic(videoId=1, get_at=get, YouTubeView=10, YouTubeLike=10, YouTubeComment=10, niconicoView=10, niconicoLike=10, niconicoComment=10, niconicoMylist=10)
    analytic.save()
    self.assertEqual(analytic.totalStatistic()["view"], 20)
    self.assertEqual(analytic.totalStatistic()["like"], 20)
    self.assertEqual(analytic.totalStatistic()["comment"], 20)


class AnalyticsViewTestCase(TestCase):
  def test_index_get0(self):
    client = Client()
    response = client.get('/')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(len(response.context["analytics"]), 0)
  
  def test_index_get1(self):
    analytic = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic.save()
    client = Client()
    response = client.get('/')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic)
    self.assertEqual(len(response.context["analytics"]), 1)

  def test_index_get2(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today()+relativedelta(days=-1), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    client = Client()
    response = client.get('/')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic0)
    self.assertEqual(len(response.context["analytics"]), 1)

  def test_index_get_sort_id(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=id')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic3)
    self.assertEqual(response.context["analytics"][1], analytic2)
    self.assertEqual(response.context["analytics"][2], analytic1)
    self.assertEqual(response.context["analytics"][3], analytic0)

  def test_index_get_sort_view(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=view')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic0)
    self.assertEqual(response.context["analytics"][1], analytic3)
    self.assertEqual(response.context["analytics"][2], analytic2)
    self.assertEqual(response.context["analytics"][3], analytic1)

  def test_index_get_sort_like(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=like')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic1)
    self.assertEqual(response.context["analytics"][1], analytic0)
    self.assertEqual(response.context["analytics"][2], analytic3)
    self.assertEqual(response.context["analytics"][3], analytic2)

  def test_index_get_sort_comment(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=comment')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic2)
    self.assertEqual(response.context["analytics"][1], analytic1)
    self.assertEqual(response.context["analytics"][2], analytic0)
    self.assertEqual(response.context["analytics"][3], analytic3)
  
  def test_index_get_order_asc(self):
    analytic1 = Analytic(videoId=0, get_at=date.today(), YouTubeView=20, YouTubeLike=20, YouTubeComment=40, niconicoView=40, niconicoLike=60, niconicoComment=60, niconicoMylist=80)
    analytic1.save()
    analytic2 = Analytic(videoId=1, get_at=date.today(), YouTubeView=10, YouTubeLike=30, YouTubeComment=30, niconicoView=50, niconicoLike=50, niconicoComment=70, niconicoMylist=70)
    analytic2.save()
    client = Client()
    response = client.get('/?order=asc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic1)
    self.assertEqual(response.context["analytics"][1], analytic2)

  def test_index_get_order_desc(self):
    analytic1 = Analytic(videoId=0, get_at=date.today(), YouTubeView=20, YouTubeLike=20, YouTubeComment=40, niconicoView=40, niconicoLike=60, niconicoComment=60, niconicoMylist=80)
    analytic1.save()
    analytic2 = Analytic(videoId=1, get_at=date.today(), YouTubeView=10, YouTubeLike=30, YouTubeComment=30, niconicoView=50, niconicoLike=50, niconicoComment=70, niconicoMylist=70)
    analytic2.save()
    client = Client()
    response = client.get('/?order=desc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic2)
    self.assertEqual(response.context["analytics"][1], analytic1)

  def test_index_get_sort_id_order_asc(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=id&order=asc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic0)
    self.assertEqual(response.context["analytics"][1], analytic1)
    self.assertEqual(response.context["analytics"][2], analytic2)
    self.assertEqual(response.context["analytics"][3], analytic3)

  def test_index_get_sort_id_order_desc(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=id&order=desc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic3)
    self.assertEqual(response.context["analytics"][1], analytic2)
    self.assertEqual(response.context["analytics"][2], analytic1)
    self.assertEqual(response.context["analytics"][3], analytic0)

  def test_index_get_sort_view_order_asc(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=view&order=asc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic1)
    self.assertEqual(response.context["analytics"][1], analytic2)
    self.assertEqual(response.context["analytics"][2], analytic3)
    self.assertEqual(response.context["analytics"][3], analytic0)

  def test_index_get_sort_view_order_desc(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=view&order=desc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic0)
    self.assertEqual(response.context["analytics"][1], analytic3)
    self.assertEqual(response.context["analytics"][2], analytic2)
    self.assertEqual(response.context["analytics"][3], analytic1)

  def test_index_get_sort_like_order_asc(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=like&order=asc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic2)
    self.assertEqual(response.context["analytics"][1], analytic3)
    self.assertEqual(response.context["analytics"][2], analytic0)
    self.assertEqual(response.context["analytics"][3], analytic1)

  def test_index_get_sort_like_order_desc(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=like&order=desc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic1)
    self.assertEqual(response.context["analytics"][1], analytic0)
    self.assertEqual(response.context["analytics"][2], analytic3)
    self.assertEqual(response.context["analytics"][3], analytic2)

  def test_index_get_sort_comment_order_asc(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=comment&order=asc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic3)
    self.assertEqual(response.context["analytics"][1], analytic0)
    self.assertEqual(response.context["analytics"][2], analytic1)
    self.assertEqual(response.context["analytics"][3], analytic2)

  def test_index_get_sort_comment_order_desc(self):
    analytic0 = Analytic(videoId=0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic0.save()
    analytic1 = Analytic(videoId=1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic1.save()
    analytic2 = Analytic(videoId=2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic2.save()
    analytic3 = Analytic(videoId=3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    analytic3.save()
    client = Client()
    response = client.get('/?sort=comment&order=desc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0], analytic2)
    self.assertEqual(response.context["analytics"][1], analytic1)
    self.assertEqual(response.context["analytics"][2], analytic0)
    self.assertEqual(response.context["analytics"][3], analytic3)

  def test_detail_get_success(self):
    analytic = Analytic(videoId=0, get_at=date.today(), YouTubeView=0, YouTubeLike=0, YouTubeComment=0, niconicoView=0, niconicoLike=0, niconicoComment=0, niconicoMylist=0)
    analytic.save()
    client = Client()
    response = client.get('/{}/'.format(analytic.pk))
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/detail.html')
    self.assertEqual(response.context["analytic"], analytic)

  def test_detail_get_fail(self):
    client = Client()
    response = client.get('/1/')
    self.assertEqual(response.status_code, 404)

  def test_fetch_get(self):
    client = Client()
    response = client.get('/fetch/')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/fetch.html')

  def test_fetch_post0(self):
    client = Client()
    response = client.post('/fetch/')
    self.assertEqual(response.status_code, 302)
    self.assertEqual(response.url, '/top/')

  def test_fetch_post1(self):
    supabaseClient = create_client(os.getenv("SUPABASE_URL"), os.getenv("SUPABASE_KEY"))
    videoList = supabaseClient.table('video').select('id, YouTube, niconico').eq('public', True).execute().data
    client = Client()
    response = client.post('/fetch/')
    response = client.get('/top/')
    self.assertEqual(len(response.context["analytics"]), len(videoList))

  def test_fetch_post2(self):
    supabaseClient = create_client(os.getenv("SUPABASE_URL"), os.getenv("SUPABASE_KEY"))
    videoList = supabaseClient.table('video').select('id, YouTube, niconico').eq('public', True).execute().data
    client = Client()
    for _ in range(2):
      response = client.post('/fetch/')
    response = client.get('/top/')
    self.assertEqual(len(response.context["analytics"]), len(videoList))