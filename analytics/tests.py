import os
from analytics.models import Analytic, Video, compareAnalytic
from datetime import date
from dateutil.relativedelta import relativedelta
from dotenv import load_dotenv
from django.test import TestCase, Client
from supabase import create_client

load_dotenv()


class SampleTestCase(TestCase):
  def test_sample1(self):
    self.assertEqual(1+2, 3)


class VideoModelTestCase(TestCase):
  def test_create_video(self):
    post = date.today()
    video = Video.objects.create(video_number=1, title="test", posted_at=post, YouTube="aaaaaaaaaaa", niconico="sm9")
    video = Video.objects.get(pk=video.pk)
    self.assertEqual(video.video_number, 1)
    self.assertEqual(video.title, "test")
    self.assertEqual(video.posted_at, post)
    self.assertEqual(video.YouTube, "aaaaaaaaaaa")
    self.assertEqual(video.niconico, "sm9")


class AnalyticModelTestCase(TestCase):
  def test_create_analytic0(self):
    post, get = date.today(), date.today()
    video = Video.objects.create(video_number=1, title="test", posted_at=post, YouTube="aaaaaaaaaaa", niconico="sm9")
    analytic = Analytic.objects.create(video=video, get_at=get, YouTubeView=0, YouTubeLike=0, YouTubeComment=0, niconicoView=0, niconicoLike=0, niconicoComment=0, niconicoMylist=0)
    analytic = Analytic.objects.get(pk=analytic.pk)
    self.assertEqual(analytic.video, video)
    self.assertEqual(analytic.get_at, get)
    self.assertEqual(analytic.YouTubeView, 0)
    self.assertEqual(analytic.YouTubeLike, 0)
    self.assertEqual(analytic.YouTubeComment, 0)
    self.assertEqual(analytic.niconicoView, 0)
    self.assertEqual(analytic.niconicoLike, 0)
    self.assertEqual(analytic.niconicoComment, 0)
    self.assertEqual(analytic.niconicoMylist, 0)

  def test_create_analytic1(self):
    post, get = date.today(), date.today()
    video = Video.objects.create(video_number=1, title="test", posted_at=post, YouTube="aaaaaaaaaaa", niconico="sm9")
    analytic = Analytic.objects.create(video=video, get_at=get, YouTubeView=10, YouTubeLike=10, YouTubeComment=10, niconicoView=10, niconicoLike=10, niconicoComment=10, niconicoMylist=10)
    analytic = Analytic.objects.get(pk=analytic.pk)
    self.assertEqual(analytic.video, video)
    self.assertEqual(analytic.get_at, get)
    self.assertEqual(analytic.YouTubeView, 10)
    self.assertEqual(analytic.YouTubeLike, 10)
    self.assertEqual(analytic.YouTubeComment, 10)
    self.assertEqual(analytic.niconicoView, 10)
    self.assertEqual(analytic.niconicoLike, 10)
    self.assertEqual(analytic.niconicoComment, 10)
    self.assertEqual(analytic.niconicoMylist, 10)

  def test_totalStatistics0(self):
    post, get = date.today(), date.today()
    video = Video.objects.create(video_number=1, title="test", posted_at=post, YouTube="aaaaaaaaaaa", niconico="sm9")
    analytic = Analytic.objects.create(video=video, get_at=get, YouTubeView=0, YouTubeLike=0, YouTubeComment=0, niconicoView=0, niconicoLike=0, niconicoComment=0, niconicoMylist=0)
    self.assertEqual(analytic.totalStatistic()["view"], 0)
    self.assertEqual(analytic.totalStatistic()["like"], 0)
    self.assertEqual(analytic.totalStatistic()["comment"], 0)

  def test_totalStatistics1(self):
    post, get = date.today(), date.today()
    video = Video.objects.create(video_number=1, title="test", posted_at=post, YouTube="aaaaaaaaaaa", niconico="sm9")
    analytic = Analytic.objects.create(video=video, get_at=get, YouTubeView=10, YouTubeLike=10, YouTubeComment=10, niconicoView=10, niconicoLike=10, niconicoComment=10, niconicoMylist=10)
    self.assertEqual(analytic.totalStatistic()["view"], 20)
    self.assertEqual(analytic.totalStatistic()["like"], 20)
    self.assertEqual(analytic.totalStatistic()["comment"], 20)


class CompareAnalyticFunctionTestCase(TestCase):
  def test_compareAnalytic0(self):
    post, get = date.today(), date.today()
    video = Video.objects.create(video_number=1, title="test", posted_at=post, YouTube="aaaaaaaaaaa", niconico="sm9")
    analytic0 = Analytic.objects.create(video=video, get_at=get, YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video, get_at=get, YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    comparedStats = compareAnalytic(analytic0, analytic1)
    self.assertEqual(comparedStats["view"]["YouTube"], 3)
    self.assertEqual(comparedStats["view"]["niconico"], -1)
    self.assertEqual(comparedStats["like"]["YouTube"], -1)
    self.assertEqual(comparedStats["like"]["niconico"], 3)
    self.assertEqual(comparedStats["comment"]["YouTube"], -1)
    self.assertEqual(comparedStats["comment"]["niconico"], -1)
    self.assertEqual(comparedStats["mylist"]["niconico"], -1)
  
  def test_compareAnalytic1(self):
    post, get = date.today(), date.today()
    video = Video.objects.create(video_number=1, title="test", posted_at=post, YouTube="aaaaaaaaaaa", niconico="sm9")
    analytic0 = Analytic.objects.create(video=video, get_at=get, YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video, get_at=get, YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    comparedStats = compareAnalytic(analytic1, analytic0)
    self.assertEqual(comparedStats["view"]["YouTube"], -3)
    self.assertEqual(comparedStats["view"]["niconico"], 1)
    self.assertEqual(comparedStats["like"]["YouTube"], 1)
    self.assertEqual(comparedStats["like"]["niconico"], -3)
    self.assertEqual(comparedStats["comment"]["YouTube"], 1)
    self.assertEqual(comparedStats["comment"]["niconico"], 1)
    self.assertEqual(comparedStats["mylist"]["niconico"], 1)


class AnalyticsViewTestCase(TestCase):
  def test_index_get0(self):
    client = Client()
    response = client.get('/')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(len(response.context["list_get_at"]), 0)
    self.assertEqual(len(response.context["analytics"]), 0)
  
  def test_index_get1(self):
    video = Video.objects.create(video_number=1, title="test", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    analytic = Analytic.objects.create(video=video, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    client = Client()
    response = client.get('/')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic)
    self.assertEqual(response.context["analytics"][0]['totalView'], 7)
    self.assertEqual(response.context["analytics"][0]['totalLike'], 9)
    self.assertEqual(response.context["analytics"][0]['totalComment'], 7)
    self.assertEqual(len(response.context["list_get_at"]), 1)
    self.assertEqual(len(response.context["analytics"]), 1)

  def test_index_get2(self):
    video = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    analytic0 = Analytic.objects.create(video=video, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video, get_at=date.today()+relativedelta(days=-1), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    client = Client()
    response = client.get('/')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic0)
    self.assertEqual(len(response.context["list_get_at"]), 2)
    self.assertEqual(len(response.context["analytics"]), 1)

  def test_index_get_sort_id(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=id')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic3)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic2)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic1)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic0)

  def test_index_get_sort_view(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=view')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic0)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic3)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic2)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic1)

  def test_index_get_sort_like(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=like')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic1)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic0)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic3)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic2)

  def test_index_get_sort_comment(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=comment')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic2)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic1)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic0)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic3)
  
  def test_index_get_order_asc(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    analytic1 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=20, YouTubeLike=20, YouTubeComment=40, niconicoView=40, niconicoLike=60, niconicoComment=60, niconicoMylist=80)
    analytic2 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=10, YouTubeLike=30, YouTubeComment=30, niconicoView=50, niconicoLike=50, niconicoComment=70, niconicoMylist=70)
    client = Client()
    response = client.get('/?order=asc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic1)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic2)

  def test_index_get_order_desc(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    analytic1 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=20, YouTubeLike=20, YouTubeComment=40, niconicoView=40, niconicoLike=60, niconicoComment=60, niconicoMylist=80)
    analytic2 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=10, YouTubeLike=30, YouTubeComment=30, niconicoView=50, niconicoLike=50, niconicoComment=70, niconicoMylist=70)
    client = Client()
    response = client.get('/?order=desc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic2)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic1)

  def test_index_get_sort_id_order_asc(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=id&order=asc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic0)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic1)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic2)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic3)

  def test_index_get_sort_id_order_desc(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=id&order=desc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic3)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic2)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic1)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic0)

  def test_index_get_sort_view_order_asc(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=view&order=asc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic1)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic2)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic3)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic0)

  def test_index_get_sort_view_order_desc(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=view&order=desc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic0)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic3)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic2)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic1)

  def test_index_get_sort_like_order_asc(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=like&order=asc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic2)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic3)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic0)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic1)

  def test_index_get_sort_like_order_desc(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=like&order=desc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic1)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic0)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic3)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic2)

  def test_index_get_sort_comment_order_asc(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=comment&order=asc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic3)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic0)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic1)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic2)

  def test_index_get_sort_comment_order_desc(self):
    video0 = Video.objects.create(video_number=1, title="test1", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    video1 = Video.objects.create(video_number=2, title="test2", posted_at=date.today(), YouTube="bbbbbbbbbbb", niconico="sm13")
    video2 = Video.objects.create(video_number=3, title="test3", posted_at=date.today(), YouTube="ccccccccccc", niconico="sm16")
    video3 = Video.objects.create(video_number=4, title="test4", posted_at=date.today(), YouTube="ddddddddddd", niconico="sm31")
    analytic0 = Analytic.objects.create(video=video0, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video1, get_at=date.today(), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    analytic2 = Analytic.objects.create(video=video2, get_at=date.today(), YouTubeView=1, YouTubeLike=0, YouTubeComment=3, niconicoView=6, niconicoLike=5, niconicoComment=4, niconicoMylist=7)
    analytic3 = Analytic.objects.create(video=video3, get_at=date.today(), YouTubeView=2, YouTubeLike=1, YouTubeComment=0, niconicoView=7, niconicoLike=6, niconicoComment=5, niconicoMylist=4)
    client = Client()
    response = client.get('/?sort=comment&order=desc')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic2)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic1)
    self.assertEqual(response.context["analytics"][2]['analytic'], analytic0)
    self.assertEqual(response.context["analytics"][3]['analytic'], analytic3)

  def test_index_get_compare(self):
    video = Video.objects.create(video_number=1, title="test", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    analytic1 = Analytic.objects.create(video=video, get_at=date.today(), YouTubeView=10, YouTubeLike=20, YouTubeComment=30, niconicoView=40, niconicoLike=50, niconicoComment=60, niconicoMylist=70)
    analytic2 = Analytic.objects.create(video=video, get_at=date.today()+relativedelta(days=-1), YouTubeView=0, YouTubeLike=10, YouTubeComment=20, niconicoView=30, niconicoLike=40, niconicoComment=50, niconicoMylist=60)
    client = Client()
    response = client.get('/?compare={}'.format((date.today()+relativedelta(days=-1)).strftime('%Y年%m月%d日')))
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/index.html')
    self.assertEqual(response.context["analytics"][0]["analytic"], analytic1)
    self.assertEqual(response.context["analytics"][0]["comparedStats"], compareAnalytic(analytic1, analytic2))

  def test_detail_get_success0(self):
    video = Video.objects.create(video_number=1, title="test", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    client = Client()
    response = client.get('/video/{}/'.format(video.video_number))
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/detail.html')
    self.assertEqual(response.context["video"], video)
    self.assertEqual(len(response.context["analytics"]), 0)

  def test_detail_get_success1(self):
    video = Video.objects.create(video_number=1, title="test", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    analytic = Analytic.objects.create(video=video, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    client = Client()
    response = client.get('/video/{}/'.format(video.video_number))
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/detail.html')
    self.assertEqual(response.context["video"], video)
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic)
    self.assertEqual(len(response.context["analytics"]), 1)

  def test_detail_get_success2(self):
    video = Video.objects.create(video_number=1, title="test", posted_at=date.today(), YouTube="aaaaaaaaaaa", niconico="sm9")
    analytic0 = Analytic.objects.create(video=video, get_at=date.today(), YouTubeView=3, YouTubeLike=2, YouTubeComment=1, niconicoView=4, niconicoLike=7, niconicoComment=6, niconicoMylist=5)
    analytic1 = Analytic.objects.create(video=video, get_at=date.today()+relativedelta(days=-1), YouTubeView=0, YouTubeLike=3, YouTubeComment=2, niconicoView=5, niconicoLike=4, niconicoComment=7, niconicoMylist=6)
    client = Client()
    response = client.get('/video/{}/'.format(video.video_number))
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/detail.html')
    self.assertEqual(response.context["video"], video)
    self.assertEqual(response.context["analytics"][0]['analytic'], analytic0)
    self.assertEqual(response.context["analytics"][1]['analytic'], analytic1)
    self.assertEqual(len(response.context["analytics"]), 2)

  def test_detail_get_fail(self):
    client = Client()
    response = client.get('/video/1/')
    self.assertEqual(response.status_code, 404)

  def test_fetch_get(self):
    client = Client()
    response = client.get('/fetch/')
    self.assertEqual(response.status_code, 200)
    self.assertEqual(response.templates[0].name, 'analytics/fetch.html')

  def test_fetch_post0(self):
    client = Client()
    response = client.post('/fetch/')
    self.assertEqual(response.status_code, 302)
    self.assertEqual(response.url, '/top/')

  def test_fetch_post1(self):
    supabaseClient = create_client(os.getenv("SUPABASE_URL"), os.getenv("SUPABASE_KEY"))
    videoList = supabaseClient.table('video').select('id, title, posted_at, YouTube, niconico').eq('public', True).execute().data
    client = Client()
    response = client.post('/fetch/')
    response = client.get('/top/')
    self.assertEqual(len(response.context["analytics"]), len(videoList))

  def test_fetch_post2(self):
    supabaseClient = create_client(os.getenv("SUPABASE_URL"), os.getenv("SUPABASE_KEY"))
    videoList = supabaseClient.table('video').select('id, title, posted_at, YouTube, niconico').eq('public', True).execute().data
    client = Client()
    for _ in range(2):
      response = client.post('/fetch/')
    response = client.get('/top/')
    self.assertEqual(len(response.context["analytics"]), len(videoList))